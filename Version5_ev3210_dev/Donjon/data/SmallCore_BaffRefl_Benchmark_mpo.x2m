*---
*  Nodal Expansion Reflector DF-NEM equivalence prodedure
*  Production of a reflector Multicompo file
*---
PROCEDURE GetMolarMass MetalMix CreaDilut ;
LINKED_LIST
  Library LibDilut MACRO LibFuel MolarMasses FeNat CrNat SnNat
  NiNat ZrNat TiNat SiNat BNat AgNat CdNat SNat GdNat Zirc4 Incon
  SS304 M5 KNat InNat AIC Gd2O3 BP Edition Multicompo GEOM TRACK
  SYSTEM FLUX OUTF TRKFIL FLX_CB1 FLX_CB2 FLX_CB3 FractionVol MCompRefl
  GeomRefl MacrRefl MacrFuel nbZonesOBJ ;
HDF5_FILE AM3E_420  :: FILE './Ass_3GLE_420_16Gd_99g-mpo.hdf' ;
SEQ_ASCII _MCompRefl :: FILE '_Multicompo_Refl_MCompRefl.txt' ;
SEQ_ASCII _FLX_CB1  :: FILE '_FLX_CB1.txt' ;
SEQ_ASCII _VAL_CB1  :: FILE '_VAL_CB1.txt' ;
SEQ_ASCII _FLX_CB2  :: FILE '_FLX_CB2.txt' ;
SEQ_ASCII _VAL_CB2  :: FILE '_VAL_CB2.txt' ;
SEQ_ASCII _FLX_CB3  :: FILE '_FLX_CB3.txt' ;
SEQ_ASCII _VAL_CB3  :: FILE '_VAL_CB3.txt' ;
MODULE
  GEO: MCR: ASM: FLU: EDI: COMPO: DELETE: UTL: END: ABORT: MAC: SNT: GREP: MSTR: BREF: ;
PROCEDURE assertS ;

*---- General informations    --------------------------
*------------------------------------------------------
* Selection de la bibliotheque de donnees nucleaires
* a utiliser. Pour modifier, remplacer dans la def.
* de NuclData par la bibliotheque souhaitee.
* LibType s'obtient a partir de NuclData directement dans le
* fichier .access
*------------------------------------------------------
STRING  NuclData := "CLA99CEA93:CLA99CEA93_SS" ;
STRING  LibType := "CLA99CEA93" ;
STRING  Gestion  := "EPR" ; ! TIH, BEAV OR EPR
ECHO "LibType=" LibType ;

*-------------------------------------------------------
* Procedures: - Retrieve molar masses (GetMolarMasses)
*             - Create Metal Mixes (MetalMix)
*---- 1) Molar Masses ----------------------------------
MolarMasses := GetMolarMass :: <<NuclData>> <<LibType>> ;

*---- 2) Metal Mixes -----------------------------------
FeNat CrNat SnNat NiNat BNat ZrNat TiNat SiNat KNat AgNat CdNat SNat
InNat Zirc4 Incon SS304 M5 AIC GdNat Gd2O3 BP := MetalMix
MolarMasses :: <<LibType>> <<Gestion>> ;

*--------------------------------------------------------------------
*-------------------------Compute LibFuel-------------------------
*--------------------------------------------------------------------

LibFuel :=  MCR: AM3E_420 :: EDIT 3 MACRO NMIX 1
   MPO AM3E_420 output_0 MIX  1 SET 'BURN' 0.0 SET 'C_B10_WATER' 4.7402E-6
   ENDMIX ;
   
*--------------------------------------------------------------------
*-------------------Debut des calculs de reflecteur------------------
*--------------------------------------------------------------------

MCompRefl := COMPO: ::
  EDIT 1
  STEP UP 'Radial'
    COMM 'Radial reflector XS' ENDC
    PARA 'C-BORE'      VALU REAL
    PARA 'Method'      VALU CHAR
    PARA 'Palier'      VALU CHAR
    INIT
  ;

! Donnees a fournir a CreaDilut, fonction de dilution, pour chaque zone
REAL dMod TMil fvMod fvZr4 fvInc fvSS304 fvHe ;
INTEGER premierMIX ;
STRING Localisation := 'Radial' ;

FractionVol := MSTR: :: CD 'Radial' ;

*--------------------------------------------------------------------
* 1D radial core-reflector interface geometry and meshing
*--------------------------------------------------------------------
REAL ep_c1 ep_c2 ep_c3 ep_lbord ep_l ep_b ep_r1 ep_r2 ep_r3 ep_r4 ep_r5
:= 21.5 16.5 5.0 0.005 0.095 2.28 1.3 8. 9.82 0.005 8.615 ;
REAL x_c1 := ep_c1 ;
REAL x_c2 := x_c1 ep_c2 + ;
REAL x_c3 := x_c2 ep_c3 + ;
REAL x_lbord := x_c3 ep_lbord + ;
REAL x_l := x_lbord ep_l + ;
REAL x_b := x_l ep_b + ;
REAL x_r1 := x_b ep_r1 + ;
REAL x_r2 := x_r1 ep_r2 + ;
REAL x_r3 := x_r2 ep_r3 + ;
REAL x_r4 := x_r3 ep_r4 + ;
REAL x_r5 := x_r4 ep_r5 + ;

INTEGER n_c1 := 20 ;
INTEGER n_c2 := 15 ;
INTEGER n_c3 := 20 ;
INTEGER n_lbord := 1 ;
INTEGER n_l := 3 ;
INTEGER n_b := 10 ;
INTEGER n_r1 := 5 ;
INTEGER n_r2 := 8 ;
INTEGER n_r3 := 9 ; 
INTEGER n_r4 := 1 ; 
INTEGER n_r5 := 8 ; 

*----------------------------------------------------------
*  Geometrie du reflecteur
*----------------------------------------------------------
GEOM := GEO: :: CAR1D 11
  X- ALBE 1.0 X+ VOID
  MESHX 0.0 <<x_c1>> <<x_c2>> <<x_c3>> <<x_lbord>> <<x_l>>
  <<x_b>> <<x_r1>> <<x_r2>> <<x_r3>> <<x_r4>> <<x_r5>>
  MIX 1 1 1 2 3 4 5 6 4 7 8
  SPLITX <<n_c1>> <<n_c2>> <<n_c3>> <<n_lbord>> <<n_l>>
  <<n_b>> <<n_r1>> <<n_r2>> <<n_r3>> <<n_r4>> <<n_r5>>
;
TRACK := SNT: GEOM ::
  EDIT 1
  MAXR 100000
  SN 16 SCAT 2 QUAD 10 ;

INTEGER nbZones := 7 ;
nbZonesOBJ := UTL: :: CREA 'Radial' 1 = <<nbZones>> ;
! Fraction volumique pour la zone1, zone2, zone3, etc.

REAL fvaci1 := 0.74 ;
REAL fveau1 := 1.0 fvaci1 - ;
REAL fvaci2 := 0.92 ;
REAL fveau2 := 1.0 fvaci2 - ;
FractionVol := UTL: FractionVol :: STEP UP 'Radial'
                  ! MIX  2  3  4  5          6          7   8
CREA 'Eau' <<nbZones>> = 1. 1. 0. <<fveau1>> <<fveau2>> 0.  0.
CREA 'Zr4' <<nbZones>> = 0. 0. 0. 0.         0.         0.  0.
CREA 'Inc' <<nbZones>> = 0. 0. 0. 0.         0.         0.  0.
CREA 'SS ' <<nbZones>> = 0. 0. 1. <<fvaci1>> <<fvaci2>> 1.  1.
CREA 'He ' <<nbZones>> = 0. 0. 0. 0.         0.         0.  0. ;

REAL dModBas := 0.753 ; ! Densite du moderateur en entree du coeur
REAL TMilBas := 286.4 ; ! Temp du reflecteur bas (soit Tmod,entree)
EVALUATE TMilBas := TMilBas 273.15 + ; ! Conversion en Kelvin

! Reflector equivalence variables
STRING Palier ;
REAL Keff ;
REAL CB ; ! ppm
INTEGER iPalier ;
LINKED_LIST OUT_1 OVAL MACR_TRAC MACR_FLUX ;
MODULE NSST: NSSF: VAL: ;

*--------------------------------------------------------------------
* Loop on Boron CB in reflector
*--------------------------------------------------------------------
ECHO "Loop on Boron density in reflector" ;
INTEGER IndexCB := 1 ;
INTEGER iZone ;
WHILE IndexCB 3 <= DO
  IF IndexCB 1 = THEN
    EVALUATE CB := 0.0 ; ! ppm
  ELSEIF IndexCB 2 = THEN
    EVALUATE CB := 700.0 ; ! ppm
  ELSEIF IndexCB 3 = THEN
    EVALUATE CB := 1400.0 ; ! ppm
  ELSE
    ECHO "ERROR, INDEXCB NOT RECOGNIZED" ;
    ABORT: ;
  ENDIF ;

  EVALUATE Palier := "EPR" ;
  ECHO "Palier =" Palier "CB reflector=" CB ;

  UTL: FractionVol :: DUMP ;
  EVALUATE dMod := dModBas ;
  EVALUATE TMil := TMilBas ;
 
  MACRO := LibFuel ;

  GREP: nbZonesOBJ :: GETVAL <<Localisation>> 1 >>nbZones<< ;
  EVALUATE iZone := 1 ;
  WHILE iZone nbZones <= DO
    ! On recupere la composition des zones
    GREP: FractionVol :: STEP UP <<Localisation>>
                         GETVAL 'Eau' <<iZone>> >>fvMod<<
                         GETVAL 'Zr4' <<iZone>> >>fvZr4<<
                         GETVAL 'Inc' <<iZone>> >>fvInc<<
                         GETVAL 'SS ' <<iZone>> >>fvSS304<<
                         GETVAL 'He ' <<iZone>> >>fvHe<<    ;
    ! On affiche la composition des zones
    ECHO "[Refl" Localisation
         "] Composition de la zone : " iZone ;
    ECHO "- eau   : " fvMod " ;" ;
    ECHO "- Zr4   : " fvZr4 " ;" ;
    ECHO "- Inc   : " fvInc " ;" ;
    ECHO "- SS304 : " fvSS304 " ;" ;
    ECHO "- He    : " fvHe "." ;
    ! Define MIX 1 in reflector macrolib
    LibDilut := CreaDilut
    MolarMasses BNat Zirc4 Incon SS304 ::
    <<dMod>> <<TMil>> <<CB>> <<fvMod>> <<fvZr4>> <<fvInc>>
    <<fvSS304>> <<NuclData>> <<LibType>> ;

    ! Les MIX des melanges seront definis a partir de 2
    EVALUATE premierMIX := 1 iZone + ;
    ECHO "First MIX : " premierMIX ;
    ! Recuperation du MIX constitutif de la zone
   
    MACRO := MAC: MACRO LibDilut ::
    NMIX <<premierMIX>> MIX <<premierMIX>> 1 OLDL ;
  
    LibDilut := DELETE: LibDilut ;
    EVALUATE iZone := iZone 1 + ;
  ENDWHILE ;
        
  SYSTEM := ASM: MACRO TRACK :: ARM ;
  FLUX := FLU: SYSTEM MACRO TRACK :: EDIT 0 TYPE K P1 MERG 1 2 2 2 2 2 2 2 ;

  GREP: FLUX :: GETVAL 'K-EFFECTIVE' 1 >>Keff<< ;
  ECHO "SN Keff=" Keff ;

  OUT_1 := EDI: MACRO TRACK FLUX GEOM ::
      EDIT 3 UPS MERGE MIX 1 2 3 3 3 3 4 0
      COND 0.625 GOLVER SAVE ;
  OUTF := EDI: MACRO TRACK FLUX GEOM ::
      EDIT 3 UPS MERGE NONE
      COND 0.625 SAVE ;

  IF IndexCB 1 = THEN
    FLX_CB1 := OUTF :: STEP UP 'REF-CASE0001' STEP UP MACROLIB ;
    _FLX_CB1 := FLX_CB1 ;
  ELSEIF IndexCB 2 = THEN
    FLX_CB2 := OUTF :: STEP UP 'REF-CASE0001' STEP UP MACROLIB ;
    _FLX_CB2 := FLX_CB2 ;
  ELSEIF IndexCB 3 = THEN
    FLX_CB3 := OUTF :: STEP UP 'REF-CASE0001' STEP UP MACROLIB ;
    _FLX_CB3 := FLX_CB3 ;
  ENDIF ;
  SYSTEM FLUX MACRO OUTF := DELETE: SYSTEM FLUX MACRO OUTF ;

  !----------------------------------------------------------
  !  Reflector equivalence procedure
  !----------------------------------------------------------
  GeomRefl MacrRefl := BREF: GEOM OUT_1 ::
     EDIT 2 MIX 1 3 GAP 2 4 HYPE 2 MODEL DF-NEM NGET 1.0 1.0 ;

  !----------------------------------------------------------
  !  Verification calculations
  !----------------------------------------------------------
  MACR_TRAC := NSST: GeomRefl :: EDIT 2 TITLE 'alpha1.txt' HYPE 2 ;
  MacrFuel := OUT_1 :: STEP UP 'REF-CASE0001' STEP UP MACROLIB ;
  MACRO := MacrRefl ;
  MACRO := MAC: MACRO MacrFuel ::
    MIX 1 1 OLDL ; ! Recover fuel data for specific CASE
        
  MACR_FLUX := NSSF: MACR_TRAC MACRO ::
    EDIT 2 THER 50 1.0E-3 EXTE 100 1.0E-5 LEAK quadratic
  ;
  OVAL := VAL: MACR_TRAC MACR_FLUX MACRO ::
    EDIT 2
    POWR 1.0 DIM 1 0.7
  ;
  ECHO "...IndexCB=" IndexCB ;
  IF IndexCB 1 = THEN
     assertS MACR_FLUX :: K-EFFECTIVE 1 1.103996 ;
     _VAL_CB1 := OVAL ;
  ELSEIF IndexCB 2 = THEN
     assertS MACR_FLUX :: K-EFFECTIVE 1 1.103962 ;
     _VAL_CB2 := OVAL ;
  ELSEIF IndexCB 3 = THEN
     assertS MACR_FLUX :: K-EFFECTIVE 1 1.103930 ;
     _VAL_CB3 := OVAL ;
  ENDIF ;
  MACRO MacrFuel OVAL OUT_1 MACR_TRAC MACR_FLUX := DELETE:
  MACRO MacrFuel OVAL OUT_1 MACR_TRAC MACR_FLUX ;

  !----------------------------------------------------------
  !  Multicompo creation
  !----------------------------------------------------------
  Edition := EDI: MacrRefl :: EDIT 1 ADFM SAVE ;
  GeomRefl MacrRefl := DELETE: GeomRefl MacrRefl ;

  MCompRefl := COMPO: MCompRefl Edition :: EDIT 1
      STEP UP <<Localisation>>
      C-BORE <<CB>>
      Method DF-NEM
      Palier <<Palier>>
      MACRO ;
  Edition := DELETE: Edition ;

  EVALUATE IndexCB := IndexCB 1 + ;
ENDWHILE ; ! Loop over IndexCB

_MCompRefl := MCompRefl ;

ECHO "test SmallCore_BaffRefl_Benchmark_mpo.x2m completed" ;
END: ;
QUIT "LIST" .
