def generateGeoCore(nb_elements_list):

    with open('GeoCore.c2m', 'w') as fichier:
        fichier.write('* CLE-2000 Procedure \n')
        fichier.write('* Purpose : Generate equivalent core Geometry \n')
        fichier.write('* Application : ATRIUM-10 coupled neutronics-TH calculation initialization \n')
        fichier.write('* Author(s) : R. Guasch, C. Huet \n')
        fichier.write('* Date : 17/09/2024 \n')
        fichier.write('* Procedure called as: \n')
        fichier.write('* \n')
        fichier.write('* Geom := GeoCore :: \n')
        fichier.write('*  <<Splitx>> <<Splitz>> <<pitch>> ; \n')
        fichier.write('* \n')
        fichier.write('* Parameters of the procedure \n')
        fichier.write('* Benchmark  : AT10_24UOX equivalent "core" geometry \n')
        fichier.write('* Input data: \n')
        fichier.write('*   Splitx : cartesian splitting on the 2D plane : for now Splitx = 1 \n')
        fichier.write(f'*   Splitz  : axial splitting, options are = {nb_elements_list} elements \n')
        fichier.write('*   pitch : assembly/cell pitch \n')
        fichier.write('*   height : active core height \n')
        fichier.write('*---- \n')
        fichier.write('* Definition of the input and output data structures and \n')
        fichier.write('* of the input and output parameters for this procedure \n')
        fichier.write('*---- \n')
        fichier.write('* \n')
        fichier.write('PARAMETER       Geom Matex  :: \n')
        fichier.write('::: LINKED_LIST Geom Matex ; ; \n')
        fichier.write(' \n')
        fichier.write(' \n')
        fichier.write('MODULE      USPLIT: GEO: END: ; \n')
        fichier.write(' \n')
        fichier.write('*Recover input data \n')
        fichier.write('REAL    pitch height Iz1 ; \n')
        fichier.write(':: >>pitch<< >>height<< >>Iz1<< ; \n')
        fichier.write(' \n')
        fichier.write('ECHO "height = " height ; \n')
        fichier.write(' \n')
        fichier.write('INTEGER MaxR := 10000 ;')
        for i in range(int(nb_elements_list[-1]/10)):
            fichier.write(f'REAL z{i*10+1} z{i*10+2} z{i*10+3} z{i*10+4} z{i*10+5} z{i*10+6} z{i*10+7} z{i*10+8} z{i*10+9} z{i*10+10} ; \n')
        fichier.write(' \n')

        for nb_element in nb_elements_list:
            if nb_element == nb_elements_list[0]:
                fichier.write(f"IF Iz1 {nb_element} = THEN \n")
            else:
                fichier.write(f"ELSEIF Iz1 {nb_element} = THEN \n")
            fichier.write(f'EVALUATE z1 := height {nb_element} / ; \n')
            for i in range(int(nb_element)-1):
                fichier.write(f'EVALUATE z{i+2} := height {nb_element} / z{i+1} + ; \n')
            fichier.write(' \n')
            fichier.write(f'Geom := GEO: :: CAR3D 1 1 {int(nb_element)} (*No reflectors, just {nb_element} axial fuel slices with varrying properties*) \n')
            fichier.write('   X- REFL X+ REFL  Y- REFL Y+ REFL  Z- VOID Z+ VOID \n')
            fichier.write('   MESHX 0.0 <<pitch>> \n')
            fichier.write('   MESHY 0.0 <<pitch>> \n')
            fichier.write(f'   MESHZ 0.0 <<z1>> ')
            for i in range(1,int(nb_element)-1):
                fichier.write(f'<<z{i+1}>> ')
                if i%10 == 0:
                    fichier.write(' \n')
            fichier.write(f'<<z{int(nb_element)}>> \n')
            fichier.write('   MIX (* Associate 1 mix to each aial slice --> axial variations of Tfuel, Tcool, DensCool*) \n')
            for i in range(int(nb_element)):
                fichier.write(f'   PLANE {i+1} {i+1} \n')
            #fichier.write('   \n')
            fichier.write(';')
            fichier.write('   \n')
            fichier.write('Geom Matex := USPLIT: Geom :: NGRP 2 MAXR <<MaxR>> \n')
            fichier.write(f'       NMIX {int(nb_element)} NFUEL {int(nb_element)}  \n')
            fichier.write('        FMIX  1')
            for i in range(int(nb_element)-1):
                fichier.write(f' {i+2}')
                if i%10 == 0:
                    fichier.write(' \n')
            fichier.write(' \n')
            fichier.write('; \n')
        fichier.write('ENDIF ; \n')
        fichier.write('END: ; \n')
        fichier.write(' \n')
        fichier.write('QUIT "LIST" . \n')


    print(f"Les lignes ont été écrites dans le fichier {'GeoCore.c2m'}.")

def generateSetLocPara(nb_elements_list):
    with open('SetLocalParams.c2m', 'w') as fichier:
            fichier.write('* CLE-2000 Procedure \n')
            fichier.write('* Purpose : Set local TH parameters in each fuel Bundle \n')
            fichier.write('* Author : R. Guasch \n')
            fichier.write('* Date : 19/09/2024 \n')
            fichier.write('* Calling specifications : \n')
            fichier.write('*           FMAP := SetLocalParams FMAP :: (TH data) ; \n')
            fichier.write('*           where TH data = {TFuel list, TCool list, DensCool list}  ; \n')
            fichier.write(' \n')
            fichier.write(' \n')
            fichier.write('PARAMETER  FMAP THData :: \n')
            fichier.write('::: LINKED_LIST FMAP THData ; ; \n')
            fichier.write(' \n')
            fichier.write('MODULE GREP: RESINI: END: ; \n')
            fichier.write(' \n')
            for i in range(int(nb_elements_list[-1]/10)):
                fichier.write(f'REAL TF{i*10+1} TF{i*10+2} TF{i*10+3} TF{i*10+4} TF{i*10+5} TF{i*10+6} TF{i*10+7} TF{i*10+8} TF{i*10+9} TF{i*10+10} ; \n')
            for i in range(int(nb_elements_list[-1]/10)):
                fichier.write(f'REAL TC{i*10+1} TC{i*10+2} TC{i*10+3} TC{i*10+4} TC{i*10+5} TC{i*10+6} TC{i*10+7} TC{i*10+8} TC{i*10+9} TC{i*10+10} ; \n')
            for i in range(int(nb_elements_list[-1]/10)):
                fichier.write(f'REAL DC{i*10+1} DC{i*10+2} DC{i*10+3} DC{i*10+4} DC{i*10+5} DC{i*10+6} DC{i*10+7} DC{i*10+8} DC{i*10+9} DC{i*10+10} ; \n')
            fichier.write(' \n')
            for nb_element in nb_elements_list:
                if nb_element == nb_elements_list[0]:
                    fichier.write(f'IF Iz1 {nb_element} = THEN \n')
                else:
                    fichier.write(f'ELSEIF Iz1 {nb_element} = THEN \n')
                for i in range(int(nb_element)):
                    fichier.write(f'GREP: THData :: GETVAL \'TFuelList\' {i+1} >>TF{i+1}<< ; \n')
                fichier.write(' \n')
                for i in range(int(nb_element)):
                    fichier.write(f'GREP: THData :: GETVAL \'TCoolList\' {i+1} >>TC{i+1}<< ; \n')
                fichier.write(' \n')
                for i in range(int(nb_element)):
                    fichier.write(f'GREP: THData :: GETVAL \'DCoolList\' {i+1} >>DC{i+1}<< ; \n')
                fichier.write(' \n')
                fichier.write(' \n')
                fichier.write('FMAP := RESINI: FMAP :: EDIT 2 \n')
                fichier.write('   BTYPE INST-BURN \n')
                fichier.write('   INST-BVAL CHAN 0.0 \n')
                fichier.write('   SET-PARAM \'T-FUEL\' BUND <<TF1>> ')
                for i in range(int(nb_element)-1):
                    fichier.write(f'<<TF{i+2}>> ')
                    if i%10 == 0:
                        fichier.write(' \n')
                fichier.write(' \n')
                fichier.write('   SET-PARAM \'T-COOL\' BUND <<TC1>> ')
                for i in range(int(nb_element)-1):
                    fichier.write(f'<<TC{i+2}>> ')
                    if i%10 == 0:
                        fichier.write(' \n')
                fichier.write(' \n')
                fichier.write('   SET-PARAM \'D-COOL\' BUND <<DC1>> ')
                for i in range(int(nb_element)-1):
                    fichier.write(f'<<DC{i+2}>> ')
                    if i%10 == 0:
                        fichier.write(' \n')
                fichier.write(' \n')
            
            fichier.write(' \n')
            fichier.write(';')
            fichier.write(' \n')
            fichier.write("ENDIF ; \n")
            fichier.write("END: ;")
            fichier.write('QUIT "LIST" . \n')

    print(f"Les lignes ont été écrites dans le fichier {'SetLocalParams.c2m'}.")

def generateIniDONJON(nb_element):
    with open('SetLocalParams.c2m', 'w') as fichier:
        fichier.write('**************************************************************** \n')
        fichier.write('* CLE-2000 / DONJON script \n')
        fichier.write('* Purpose : initialize coupled neutronics/TH calculation \n')
        fichier.write('* Author : A. Hebert adapted by R.Guasch \n')
        fichier.write('* Date : 16/09/2024 \n')
        fichier.write('* CALL      : \n')
        fichier.write('*  Fmap Matex Cpo Track := IniDONJON ; \n')
        fichier.write('* \n')
        fichier.write('**************************************************************** \n')
        fichier.write(' \n')
        fichier.write('PARAMETER  Fmap Matex Cpo Track THData :: \n')
        fichier.write('  ::: LINKED_LIST Fmap Matex Cpo Track THData ; ; \n')
        fichier.write('STRING name_compo ; \n')
        fichier.write(':: >>name_compo<< ; \n')
        fichier.write(' \n')
        fichier.write('LINKED_LIST Geom ; \n')
        fichier.write('MODULE   TRIVAT: UTL: END: ; \n')
        fichier.write(' \n')
        fichier.write('PROCEDURE   GetData GeoCore SetFMap SetLocPara InitTHData  ; \n')
        fichier.write('SEQ_ASCII _COMPO :: FILE <<name_compo>> ; \n')
        fichier.write('*---- \n')
        fichier.write('*  Local Parameters \n')
        fichier.write('*---- \n')
        fichier.write('REAL    powi mass ; \n')
        fichier.write(' \n')
        fichier.write('REAL temp_fuel_0 temp_mode_0 dens_mode_0 ; \n')
        fichier.write(' \n')
        fichier.write('REAL pitch height := 1.295 380.0 ; \n')
        fichier.write(' \n')
        fichier.write('INTEGER MaxR := 10000 ;  \n')
        fichier.write('*---- \n')
        fichier.write('*  Recover the Multicompo \n')
        fichier.write('*---- \n')
        fichier.write('STRING DIR := "EDIPARAM" ; \n')
        fichier.write('Cpo := _COMPO ; \n')
        fichier.write('UTL: Cpo :: DIR ; \n')
        fichier.write(' \n')
        fichier.write(' \n')
        fichier.write('GetData :: \n')
        fichier.write('>>temp_fuel_0<< >>temp_mode_0<< >>dens_mode_0<< >>powi<< >>mass<< ; \n')
        fichier.write(' \n')
        fichier.write('ECHO "GetData : Tfuel = " temp_fuel_0 " Tmode = " temp_mode_0 " DensMode = " dens_mode_0 " height = " height ; \n')
        fichier.write('REAL BMass := mass 20.0 / ; \n')
        fichier.write(' \n')
        fichier.write('Geom Matex := GeoCore :: <<pitch>> <<height>> ; \n')
        fichier.write(' \n')


def generateNeutronics(nb_elements_list):
    with open('Neutronics.c2m', 'w') as fichier:
        fichier.write('**************************************************************** \n')
        fichier.write('* CLE-2000 Procedure \n')
        fichier.write('* Purpose : Proceed to neutronics solution \n')
        fichier.write('* Required output : axial power solution for TH solution \n')
        fichier.write('* Author : R. Guasch, Adapted from PowComponent.c2m (A. Hébert) \n')
        fichier.write('* Date : 19/09/2024 \n')
        fichier.write('* CALL      :                                                   \n')
        fichier.write('*  Fmap Matex Flux := Neutronics Fmap Matex Flux Cpo Track THData  \n')
        fichier.write('*    :: <<iter>> <<power>> ; \n')
        fichier.write(' \n')
        fichier.write(' \n')
        fichier.write('PARAMETER  Fmap Matex Flux Power Cpo Track THData  :: \n')
        fichier.write('  ::: LINKED_LIST Fmap Matex Flux Power Cpo Track THData  ; ; \n')
        fichier.write('MODULE NCR: MACINI: TRIVAA: FLUD: FLPOW: GREP: DELETE: END: ; \n')
        fichier.write('LINKED_LIST MacroF System Macro1 Macro2 MicroF ; \n')
        fichier.write('PROCEDURE SetLocPara ; \n')
        fichier.write(' \n')
        fichier.write('INTEGER iter ; \n')
        fichier.write(' :: >>iter<< ; \n')
        fichier.write('DOUBLE Dpowi  ; \n')
        fichier.write(' :: >>Dpowi<< ; \n')
        fichier.write(' \n')
        fichier.write('REAL powi := Dpowi D_TO_R ; \n')
        fichier.write(' \n')
        fichier.write('REAL keff1 ; \n')
        fichier.write(' \n')
        fichier.write('STRING DIR := "EDIPARAM" ; \n')
        fichier.write(' \n')
        fichier.write('*-- \n')
        fichier.write('* Set local parameters in fuel map \n')
        fichier.write('* -- \n')
        fichier.write(' \n')
        fichier.write('IF iter 1 = THEN \n')
        fichier.write('    ECHO "use initial Fmap" ; \n')
        fichier.write('ELSE \n')
        fichier.write('    Fmap := SetLocPara Fmap THData :: ; \n')
        fichier.write('ENDIF ; \n')
        fichier.write(' \n')
        fichier.write('*-- \n')
        fichier.write('* Recover TH data from THData linked list for XS interpolation \n')
        fichier.write('*-- \n')
        fichier.write(' \n')
        for i in range(int(nb_elements_list[-1]/10)):
            fichier.write(f'REAL TF{i*10+1} TF{i*10+2} TF{i*10+3} TF{i*10+4} TF{i*10+5} TF{i*10+6} TF{i*10+7} TF{i*10+8} TF{i*10+9} TF{i*10+10} ; \n ')
        fichier.write(' \n')
        for i in range(int(nb_elements_list[-1]/10)):
            fichier.write(f'REAL TC{i*10+1} TC{i*10+2} TC{i*10+3} TC{i*10+4} TC{i*10+5} TC{i*10+6} TC{i*10+7} TC{i*10+8} TC{i*10+9} TC{i*10+10} ; \n ')
        fichier.write(' \n')
        for i in range(int(nb_elements_list[-1]/10)):
            fichier.write(f'REAL DC{i*10+1} DC{i*10+2} DC{i*10+3} DC{i*10+4} DC{i*10+5} DC{i*10+6} DC{i*10+7} DC{i*10+8} DC{i*10+9} DC{i*10+10} ; \n ')
        fichier.write(' \n')
        for nb_element in nb_elements_list:
            if nb_element == nb_elements_list[0]:
                fichier.write(f'IF Iz1 {nb_element} = THEN \n')
            else:
                fichier.write(f'ELSEIF Iz1 {nb_element} = THEN \n')
            for i in range(int(nb_element)):
                fichier.write(f'GREP: THData :: GETVAL \'TFuelList\' {i+1} >>TF{i+1}<< ; \n')
            fichier.write(' \n')
            for i in range(int(nb_element)):
                fichier.write(f'GREP: THData :: GETVAL \'TCoolList\' {i+1} >>TC{i+1}<< ; \n')
            fichier.write(' \n')
            for i in range(int(nb_element)):
                fichier.write(f'GREP: THData :: GETVAL \'DCoolList\' {i+1} >>DC{i+1}<< ; \n')
            fichier.write(' \n')
            fichier.write(' \n')
            fichier.write('MicroF := NCR: Cpo Fmap :: \n')
            fichier.write('  EDIT 2 \n')
            fichier.write('  MICRO LINEAR \n')
            fichier.write('  TABLE Cpo <<DIR>> \n')
            for i in range(int(nb_element)):
                fichier.write(f'    MIX {i+1} INST-BURN \n')
                fichier.write(f'          SET CUBIC \'TFuel\' <<TF{i+1}>> \n')
                fichier.write(f'          SET CUBIC \'TCool\' <<TC{i+1}>> \n')
                fichier.write(f'          SET CUBIC \'DCool\' <<DC{i+1}>> \n')
                fichier.write('    ENDMIX \n')
            fichier.write('  ; \n')
        fichier.write('ENDIF ; \n')
        fichier.write(' \n')
        fichier.write(' \n')
        fichier.write('MacroF := MicroF :: STEP UP \'MACROLIB\' ; \n')
        fichier.write(' \n')
        fichier.write('Macro2 Matex := MACINI: Matex MacroF :: FUEL ; \n')
        fichier.write('  \n')
        fichier.write('*-- \n')
        fichier.write('* Steady-state diffusion calculation \n')
        fichier.write('*-- \n')
        fichier.write('System := TRIVAA: Macro2 Track ; \n')
        fichier.write(' \n')
        fichier.write('IF iter 1 = THEN \n')
        fichier.write('  Flux := FLUD: System Track :: \n')
        fichier.write('    EDIT 1 ADI 4 ACCE 5 3 ; \n')
        fichier.write('ELSE \n')
        fichier.write('  Flux := FLUD: Flux System Track :: \n')
        fichier.write('    EDIT 1 ; \n')
        fichier.write('ENDIF ; \n')
        fichier.write(' \n')
        fichier.write('System MacroF Macro2 := DELETE: System MacroF Macro2 ; \n')
        fichier.write(' \n')
        fichier.write('GREP: Flux :: GETVAL \'K-EFFECTIVE\' 1 >>keff1<< ; \n')
        fichier.write('ECHO "+++ Burnup= 0.0 Keff=" keff1 ; \n')
        fichier.write(' \n')
        fichier.write('*-- \n')
        fichier.write('* Power distribution calculation \n')
        fichier.write('*-- \n')
        fichier.write('ECHO "total reactor power=" powi "MW" ; \n')
        fichier.write('!IF iter 1 = THEN \n')
        fichier.write('ECHO "In power at iter = " iter ; \n')
        fichier.write('Power Fmap := FLPOW: Fmap Flux Track Matex \n')
        fichier.write('            :: EDIT 10 PTOT <<powi>> PRINT DISTR FLUX PRINT DISTR POWER ; \n')
        fichier.write('!ELSE \n')
        fichier.write('!    ECHO "In power edition at iter = " iter ; \n')
        fichier.write('!    Power Fmap := FLPOW: Power \n')
        fichier.write(' \n')
        fichier.write('!ENDIF ; \n')
        fichier.write(' \n')
        fichier.write(' \n')
        fichier.write('!THData := DELETE: THData ; \n')
        fichier.write(' \n')
        fichier.write('ECHO "Completed Neutronics calculation at iter = " iter ; \n')
        fichier.write('END: ; \n')

    print(f"Les lignes ont été écrites dans le fichier {'Neutronics.c2m'}.")

def generateSetFMap(nb_elements_list):
    with open('SetFMap.c2m', 'w') as fichier:
        fichier.write('**************************************************************************** \n')
        fichier.write('*                                                                          * \n')
        fichier.write('* Procedure :  SetFMap.c2m adapted from simlpePOW test                     * \n')
        fichier.write('* Purpose   :  Fuel-map specifications for BWR coupled calculation         * \n')
        fichier.write('* Author(s) :  R. Guasch, adapted from M. Guyot (2010) & A. Hebert (2011)  * \n')
        fichier.write('* Date : 19/09/2024                                                        * \n')
        fichier.write('*                                                                          * \n')
        fichier.write('* CALL      :  FMAP MATEX := SetFMap MATEX ;                               * \n')
        fichier.write('*                                                                          * \n')
        fichier.write('**************************************************************************** \n')
        fichier.write(' \n')
        fichier.write('PARAMETER Fmap Matex :: \n')
        fichier.write('      ::: LINKED_LIST \n')
        fichier.write('          Fmap Matex ; ; \n')
        fichier.write('MODULE RESINI: END: ; \n')
        fichier.write('REAL pitch height BMass Iz1 ; \n')
        fichier.write(':: >>pitch<< >>height<< >>BMass<< >>Iz1<< ; (*BMass = Bundle Mass : mass of UOX in an axial fuel slice*) \n')
        fichier.write(' \n')
        for i in range(int(nb_elements_list[-1]/10)):
            fichier.write(f'REAL z{i*10+1} z{i*10+2} z{i*10+3} z{i*10+4} z{i*10+5} z{i*10+6} z{i*10+7} z{i*10+8} z{i*10+9} z{i*10+10} ; \n ')
        fichier.write(' \n')
        for nb_element in nb_elements_list:
            if nb_element == nb_elements_list[0]:
                fichier.write(f'IF Iz1 {nb_element} = THEN \n')
            else:
                fichier.write(f'ELSEIF Iz1 {nb_element} = THEN \n')
            fichier.write(f'EVALUATE z1 := height {nb_element} / ; \n')
            for i in range(1,int(nb_element)):
                fichier.write(f'EVALUATE z{i+1} := height {nb_element} / z{i} + ; \n')
            fichier.write(' \n')
            fichier.write('*-- \n')
            fichier.write('* Fuel map definition \n')
            fichier.write('*-- \n')
            fichier.write('Fmap Matex := RESINI: Matex :: \n')
            fichier.write('   EDIT 10 \n')
            fichier.write(f'      ::: GEO: CAR3D 1 1 {int(nb_element)} \n')
            fichier.write('                EDIT  0 \n')
            fichier.write('                X- REFL X+ REFL  Y- REFL Y+ REFL  Z- VOID Z+ VOID \n')
            fichier.write('   MESHX 0.0 <<pitch>> \n')
            fichier.write('   MESHY 0.0 <<pitch>> \n')
            fichier.write('   MESHZ 0.0 <<z1>> ')
            for i in range(1,int(nb_element)-1):
                fichier.write(f'<<z{i+1}>> ')
                if i%10 == 0:
                    fichier.write(' \n')
            fichier.write(f'<<z{int(nb_element)}>> \n')
            fichier.write('\n')
            fichier.write('   MIX \n')
            for i in range(int(nb_element)):
                fichier.write(f'   PLANE {i+1} {i+1} \n')
            fichier.write('   \n')
            fichier.write('; \n')
            fichier.write('! \n')
            fichier.write('NXNAME \'01\' NYNAME  \'A\' \n')
            fichier.write('NCOMB 1 \n')
            fichier.write('B-ZONE 1 \n')
            fichier.write(' \n')
            fichier.write('BTYPE INST-BURN \n')
            fichier.write('INST-BVAL CHAN 0.0 \n')
            fichier.write('\n')
            fichier.write('ADD-PARAM PNAME \'T-FUEL\' PARKEY \'TFuel\' LOCAL \n')
            fichier.write('ADD-PARAM PNAME \'T-COOL\' PARKEY \'TCool\' LOCAL \n')
            fichier.write('ADD-PARAM PNAME \'D-COOL\' PARKEY \'DCool\' LOCAL \n')
            fichier.write('\n')
            fichier.write('FUEL WEIGHT ')
            for i in range(int(nb_element)):
                fichier.write(f'<<BMass>> ')
                if i%10 == 0:
                    fichier.write(' \n')
            fichier.write(';')
            fichier.write(' \n')

    print(f"Les lignes ont été écrites dans le fichier {'SetFMap.c2m'}.")


        
nb_elements = [10.0, 20.0, 40.0, 80.0, 160.0]

generateGeoCore(nb_elements)
generateSetLocPara(nb_elements)
#generateIniDONJON(30)
generateNeutronics(nb_elements)
generateSetFMap(nb_elements)
