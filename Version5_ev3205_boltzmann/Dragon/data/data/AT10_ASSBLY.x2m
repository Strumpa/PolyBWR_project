* DECK AT10_ASSBLY.x2m
* Puropse : perform AT10 Assembly calculation
* Author : R. Guasch
* 
* Testing Geometric definition, analysis and tracking capabilities for modules
*         Geo:, NXT:, G2S:, SALT:
*
* Dependant on procedures : Geom_A.c2m
*
* 


MODULE GEO: G2S: SALT: TLM: NXT: USS: ASM: FLU: GREP: END: ;

PROCEDURE Geom_A Geom_A2 TRK_A_SALT Mix_ASSBLY ;

LINKED_LIST GEOM GEOM_SS TRACK TRACK_SS LIBRARY ;

LINKED_LIST LIBRARY2 SYS FLUX ;

SEQ_ASCII Geo_G2S GeoSS_G2S ;
SEQ_BINARY TRACK_EXC TRACKSS_EXC ;
SEQ_ASCII FIG_main.ps :: FILE './FIG_main.ps' ;
SEQ_ASCII FIG_SS.ps :: FILE './FIG_selfshielding.ps' ;
SEQ_ASCII TLM_F :: FILE 'tracks_SALT_ASSBLY.m' ;
SEQ_ASCII TLM_SS :: FILE 'tracks_SALT_SS_ASSBLY.m' ;
REAL Kinf ;


STRING geo_name := "AT10_ASSBLY_test" ; ! Geometry choice for tests and benchmarks
STRING assbly_opt := "AT10_void_40" ; ! "AT10_void_40" option to choose from possible mixes, 0%, 40% and 80% void

! 3 level BWR geometry definition
GEOM GEOM_SS := Geom_A :: <<geo_name>> ;
!GEOM := Geom_A2 ;
ECHO "3 level Geometry generated" ;

! Call to trackin module
Geo_G2S FIG_main.ps TRACK TRACK_EXC GeoSS_G2S FIG_SS.ps TRACK_SS TRACKSS_EXC := TRK_A_SALT GEOM GEOM_SS ;

ECHO "Geometry tracking with G2S: -> SALT: completed" ;

LIBRARY := Mix_ASSBLY :: J311_295 <<assbly_opt>> ;

ECHO "Mixes for ASSBLY :" assbly_opt " retrieved"  ;

************************************************************************
*  BEGIN SELF SHIELDING CALCULATIO                                     *
************************************************************************

LIBRARY2 := USS: LIBRARY TRACK_SS TRACKSS_EXC ::
            EDIT 0
            PASS 2
            GRMIN 52
         ;

************************************************************************
*  BEGIN MOC FLUX CALCULATION                                          *
************************************************************************

SYS := ASM: LIBRARY2 TRACK TRACK_EXC :: ARM EDIT 0 ; 

FLUX := FLU: LIBRARY2 SYS TRACK TRACK_EXC :: 
             EDIT 1 TYPE K B1 SIGS 
      ;
GREP: FLUX :: GETVAL 'K-INFINITY  ' 1 1 1 >>Kinf<< ;

ECHO assbly_opt " t=0 calculation completed, Kinf = " Kinf ;



END: ;






